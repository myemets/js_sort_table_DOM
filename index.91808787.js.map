{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,CCIA,IAAM,EAAQ,SAAS,aAAa,CAAC,SA0DrC,AAzDe,SAAS,aAAa,CAAC,SAyD/B,gBAAgB,CAAC,QAAS,SAAC,CAAlC,EAGE,IAvDM,EAsBa,E,EAiCb,GAjCa,EA+BE,EAAE,MAAM,CAAC,WAAW,CAAC,IAAI,GA9B7B,A,C,A,C,S,C,E,G,M,O,C,G,O,E,E,C,GAvBX,EAAO,MAAM,IAAI,CAAC,EAAM,gBAAgB,CAAC,aAAa,GAAG,CAAC,SAAC,CAAjE,EACE,OAAO,EAAG,WAAW,CAAC,IAAI,EAC5B,G,EAIe,AAFA,MAAM,IAAI,CAAC,EAAM,gBAAgB,CAAC,aAE3B,GAAG,CAAC,SAAC,CAA3B,EACE,IAAM,EAAQ,MAAM,IAAI,CAAC,EAAI,gBAAgB,CAAC,OACxC,EAAS,CAAC,EAMhB,OAJA,EAAK,OAAO,CAAC,SAAC,CAAA,CAAK,CAAnB,EACE,CAAM,CAAC,EAAI,CAAG,CAAK,CAAC,EAAM,CAAC,WAAW,CAAC,IAAI,EAC7C,GAEO,CACT,M,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,EAQmC,IAAI,CAAC,SAAC,CAAA,CAAG,CAA5C,QACE,AACE,AAAoB,UAApB,OAAO,CAAC,CAAC,EAAM,EACf,AAAoB,UAApB,OAAO,CAAC,CAAC,EAAM,EACd,CAAC,CAAC,EAAM,CAAC,QAAQ,CAAC,KAQd,AAHM,CAAC,CAAC,EAAM,CAAC,OAAO,CAAC,QAAS,IAC1B,CAAC,CAAC,EAAM,CAAC,OAAO,CAAC,QAAS,IAJ9B,CAAC,CAAC,EAAM,CAAC,aAAa,CAAC,CAAC,CAAC,EAAM,CAO1C,IAqBM,EAAQ,EAAM,aAAa,CAAC,QAElC,CAAA,EAAM,SAAS,CAAG,GAElB,EAAU,OAAO,CAAC,SAAC,CAAnB,EACE,IAAM,EAAK,SAAS,aAAa,CAAC,MAE7B,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,OAAO,IAAI,CAAC,EAAA,CAAA,OAAA,QAAA,CAAA,GAAzB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EAAA,CAAK,IAAM,EAAN,EAAA,KAAA,EACH,AAtBN,SAAuB,CAAW,CAAE,CAAW,EAC7C,IAAM,EAAK,SAAS,aAAa,CAAC,KAElC,CAAA,EAAG,WAAW,CAAG,EACjB,EAAY,WAAW,CAAC,EAC1B,EAiBoB,CAAM,CAAC,EAAI,CAAE,E,C,C,M,E,CADxB,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAIL,EAAM,WAAW,CAAC,EACpB,EACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// write code here\nvar table = document.querySelector(\"table\");\nvar header = document.querySelector(\"thead\");\n// get array of persons from table\nfunction getPeople() {\n    var keys = Array.from(table.querySelectorAll(\"thead th\")).map(function(th) {\n        return th.textContent.trim();\n    });\n    var values = Array.from(table.querySelectorAll(\"tbody tr\"));\n    var people = values.map(function(row) {\n        var cells = Array.from(row.querySelectorAll(\"td\"));\n        var person = {};\n        keys.forEach(function(key, index) {\n            person[key] = cells[index].textContent.trim();\n        });\n        return person;\n    });\n    return people;\n}\n// method for sorting\nfunction sortByClick(field, arrayForSort) {\n    var newArray = _to_consumable_array(arrayForSort).sort(function(a, b) {\n        if (typeof a[field] === \"string\" && typeof b[field] === \"string\" && !a[field].includes(\"$\")) return a[field].localeCompare(b[field]);\n        var val1 = a[field].replace(/[$,]/g, \"\");\n        var val2 = b[field].replace(/[$,]/g, \"\");\n        return val1 - val2;\n    });\n    return newArray;\n}\n// method for adding data of objects to table\nfunction addingContent(textContent, rowToAppend) {\n    var td = document.createElement(\"td\");\n    td.textContent = textContent;\n    rowToAppend.appendChild(td);\n}\n// creating event for clicking\nheader.addEventListener(\"click\", function(e) {\n    var fieldForSort = e.target.textContent.trim();\n    var newPeople = sortByClick(fieldForSort, getPeople());\n    var tbody = table.querySelector(\"tbody\");\n    tbody.innerHTML = \"\";\n    newPeople.forEach(function(person) {\n        var tr = document.createElement(\"tr\");\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = Object.keys(person)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var key = _step.value;\n                addingContent(person[key], tr);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        tbody.appendChild(tr);\n    });\n});\n\n//# sourceMappingURL=index.91808787.js.map\n","'use strict';\n\n// write code here\n\nconst table = document.querySelector('table');\nconst header = document.querySelector('thead');\n\n// get array of persons from table\n\nfunction getPeople() {\n  const keys = Array.from(table.querySelectorAll('thead th')).map((th) => {\n    return th.textContent.trim();\n  });\n\n  const values = Array.from(table.querySelectorAll('tbody tr'));\n\n  const people = values.map((row) => {\n    const cells = Array.from(row.querySelectorAll('td'));\n    const person = {};\n\n    keys.forEach((key, index) => {\n      person[key] = cells[index].textContent.trim();\n    });\n\n    return person;\n  });\n\n  return people;\n}\n\n// method for sorting\n\nfunction sortByClick(field, arrayForSort) {\n  const newArray = [...arrayForSort].sort((a, b) => {\n    if (\n      typeof a[field] === 'string' &&\n      typeof b[field] === 'string' &&\n      !a[field].includes('$')\n    ) {\n      return a[field].localeCompare(b[field]);\n    }\n\n    const val1 = a[field].replace(/[$,]/g, '');\n    const val2 = b[field].replace(/[$,]/g, '');\n\n    return val1 - val2;\n  });\n\n  return newArray;\n}\n\n// method for adding data of objects to table\n\nfunction addingContent(textContent, rowToAppend) {\n  const td = document.createElement('td');\n\n  td.textContent = textContent;\n  rowToAppend.appendChild(td);\n}\n\n// creating event for clicking\n\nheader.addEventListener('click', (e) => {\n  const fieldForSort = e.target.textContent.trim();\n\n  const newPeople = sortByClick(fieldForSort, getPeople());\n\n  const tbody = table.querySelector('tbody');\n\n  tbody.innerHTML = '';\n\n  newPeople.forEach((person) => {\n    const tr = document.createElement('tr');\n\n    for (const key of Object.keys(person)) {\n      addingContent(person[key], tr);\n    }\n\n    tbody.appendChild(tr);\n  });\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","table","document","querySelector","header","addEventListener","e","keys","field","newPeople","target","textContent","trim","_to_consumable_array","_array_without_holes","isArray","from","querySelectorAll","map","th","values","row","cells","person","forEach","key","index","_iterable_to_array","iter","Symbol","iterator","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","sort","a","b","includes","val1","replace","localeCompare","tbody","innerHTML","tr","createElement","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","value","addingContent","rowToAppend","td","appendChild","err","return"],"version":3,"file":"index.91808787.js.map"}